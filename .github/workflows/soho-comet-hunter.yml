Yes! You **can and should** update your existing `soho-comet-hunter.yml` file — and I’ll give you the **exact updated version** with the **missing dependencies** added for **clean MP4/GIF animations**.

---

### What We’re Adding

```yaml
imageio imageio-ffmpeg
```

These are **required** to generate:
- `animation_gif_clean_path`
- `animation_mp4_clean_path` (clean MP4 video — best for review)

Without `imageio-ffmpeg`, **MP4 export will fail silently**.

---

### Updated `soho-comet-hunter.yml` (Ready to Commit)

```yaml
name: SOHO Comet Hunt

on:
  schedule:
    - cron: "0 * * * *"       # hourly
    - cron: "*/15 * * * *"    # every 15 minutes
  workflow_dispatch:

# IMPORTANT: allow this workflow to push commits back to the repo
permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (with write token)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install opencv-python-headless numpy requests pillow \
                      filterpy scipy \
                      imageio imageio-ffmpeg

      - name: Fetch & Detect
        env:
          DETECTOR_DEBUG: "1"
          USE_AI_CLASSIFIER: "0"
          AI_VETO_ENABLED: "1"
          AI_VETO_LABEL: "not_comet"
          AI_VETO_SCORE_MAX: "0.9"
          ALERT_WEBHOOK_URL: ${{ secrets.ALERT_WEBHOOK_URL }}
          SELECT_TOP_N_FOR_SUBMIT: "3"
          OCCULTER_RADIUS_FRACTION: "0.18"
          MAX_EDGE_RADIUS_FRACTION: "0.98"
          DUAL_CHANNEL_MAX_MINUTES: "60"
          DUAL_CHANNEL_MAX_ANGLE_DIFF: "25"
        run: |
          python detector/detect_comets.py --hours 6 --step-min 12 --out detections
          echo "frames tree:"; find frames -maxdepth 2 -type f -printf "%P\n" | sort | sed 's/^/  - /'
          echo "detections tree:"; find detections -maxdepth 2 -type f -printf "%P\n" | sort | sed 's/^/  - /'

      - name: Commit outputs
        id: commit_outputs
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if [ -n "$(git status --porcelain detections)" ]; then
            git add detections
            git commit -m "Detector status & outputs: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            echo "committed=true" >> $GITHUB_OUTPUT
          else
            echo "No new artifacts to commit."
            echo "committed=false" >> $GITHUB_OUTPUT
          fi

      - name: Push (using GITHUB_TOKEN)
        if: steps.commit_outputs.outputs.committed == 'true'
        run: |
          set -e
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Push fallback with PAT
        if: steps.commit_outputs.outputs.committed == 'true' && failure()
        env:
          PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
        run: |
          if [ -z "${PUSH_TOKEN}" ]; then
            echo "No PUSH_TOKEN provided; cannot fallback push."
            exit 1
          fi
          git remote set-url origin https://${PUSH_TOKEN}@github.com/${{ github.repository }}.git
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Upload artifacts (always)
        uses: actions/upload-artifact@v4
        with:
          name: detections-${{ github.run_id }}
          path: |
            detections/latest_status.json
            detections/candidates_*.json
            detections/reports/*.csv
            detections/reports/*.txt
            detections/overlay_*.png
            detections/contact_*.png
            detections/lastthumb_*.png
            detections/animations/*.mp4
            detections/animations/*.gif
          if-no-files-found: warn
          retention-days: 7
```

---

### Key Changes

| Line | Change |
|------|--------|
| `pip install ...` | Added `filterpy scipy imageio imageio-ffmpeg` |
| `path:` in `upload-artifact` | Added `detections/animations/*.mp4` and `*.gif` |

> This ensures **clean MP4s are uploaded** and visible in GitHub Actions logs.

---

### Final Checklist (Push These Files)

| File | Status |
|------|--------|
| `.github/workflows/soho-comet-hunter.yml` | Updated with `imageio-ffmpeg` |
| `detector/detect_comets.py` | `write_animation_for_track()` updated |
| `index.html` | `<script>` block replaced with **clean video player** |

---

### Result After Next Run

1. **GitHub Actions** generates:
   - `detections/animations/C2_track1_clean.mp4`
   - `detections/animations/C2_track1_annotated.mp4`
2. **Viewer (`index.html`)** shows:
   - Clean MP4 by default
   - Toggle: **Clean ↔ Annotated**
   - Loop + controls

---

**Push this now** — your next hourly run will generate **review-ready clean animations**!

Let me know when it's live — I’ll help test the viewer on GitHub Pages.
